name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on Java ${{ matrix.java }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java: [8, 11, 17, 21]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests - Java ${{ matrix.java }} - ${{ matrix.os }}
        path: target/surefire-reports/*.xml
        reporter: java-junit

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java${{ matrix.java }}-${{ matrix.os }}
        path: target/surefire-reports/

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run SpotBugs Analysis (All Issues)
      run: |
        # First run SpotBugs to generate full report (don't fail on this)
        mvn spotbugs:spotbugs -Dspotbugs.threshold=Low -Dspotbugs.failOnError=false
        if [ -f target/spotbugsXml.xml ]; then
          echo "SpotBugs analysis completed. Report available at target/spotbugsXml.xml"
          if [ -s target/spotbugsXml.xml ]; then
            echo "‚ö†Ô∏è SpotBugs found potential issues. Check the uploaded report for details."
          else
            echo "‚úÖ SpotBugs found no issues."
          fi
        fi
      continue-on-error: true

    - name: Check Critical SpotBugs Issues
      run: |
        # Run our custom critical issues check script
        chmod +x scripts/spotbugs-critical-check.sh
        ./scripts/spotbugs-critical-check.sh

    - name: Upload SpotBugs Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-report
        path: |
          target/spotbugsXml.xml
          target/spotbugs.html

    - name: Comment SpotBugs Results
      if: always() && github.event_name == 'pull_request'
      run: |
        if [ -f target/spotbugsXml.xml ]; then
          TOTAL_ISSUES=$(grep -c '<BugInstance' target/spotbugsXml.xml || echo "0")
          CRITICAL_ISSUES=$(grep -c 'priority="1"' target/spotbugsXml.xml || echo "0")
          HIGH_ISSUES=$(grep -c 'priority="2"' target/spotbugsXml.xml || echo "0")
          
          echo "## üîç SpotBugs Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "üö® **$CRITICAL_ISSUES critical issues found** - Build will fail" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **No critical issues found** - Build can proceed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Issue Summary:**" >> $GITHUB_STEP_SUMMARY
          echo "- Critical (Priority 1): $CRITICAL_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- High (Priority 2): $HIGH_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- Total Issues: $TOTAL_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìã [Download detailed SpotBugs report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Only critical issues (Priority 1) will fail the build. Other issues are informational." >> $GITHUB_STEP_SUMMARY
        else
          echo "## üîç SpotBugs Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **No issues found**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check code formatting
      run: |
        mvn spotless:check
        if [ $? -ne 0 ]; then
          echo "‚ùå Code formatting issues found. Run 'mvn spotless:apply' to fix them."
          exit 1
        else
          echo "‚úÖ Code formatting is correct."
        fi

    - name: Run Checkstyle
      run: mvn checkstyle:check

    - name: Compile and package
      run: mvn clean compile package -DskipTests

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: target/*.jar

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests with coverage
      run: mvn clean test jacoco:report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: target/site/jacoco/ 