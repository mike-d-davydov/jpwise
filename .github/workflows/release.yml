name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Extract version from tag
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update version in pom.xml
      run: mvn versions:set -DnewVersion=${{ steps.extract_version.outputs.VERSION }}

    - name: Run tests
      run: mvn clean test

    - name: Build and package
      run: mvn clean package -DskipTests

    - name: Generate JavaDoc
      run: mvn javadoc:javadoc

    - name: Create sources JAR
      run: mvn source:jar

    - name: Create JavaDoc JAR
      run: mvn javadoc:jar

    - name: Create release notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## JPWise v${{ steps.extract_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Changes" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: JPWise v${{ steps.extract_version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false

    - name: Upload JAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/jpwise-${{ steps.extract_version.outputs.VERSION }}.jar
        asset_name: jpwise-${{ steps.extract_version.outputs.VERSION }}.jar
        asset_content_type: application/java-archive

    - name: Upload Sources JAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/jpwise-${{ steps.extract_version.outputs.VERSION }}-sources.jar
        asset_name: jpwise-${{ steps.extract_version.outputs.VERSION }}-sources.jar
        asset_content_type: application/java-archive

    - name: Upload JavaDoc JAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/jpwise-${{ steps.extract_version.outputs.VERSION }}-javadoc.jar
        asset_name: jpwise-${{ steps.extract_version.outputs.VERSION }}-javadoc.jar
        asset_content_type: application/java-archive

  publish:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'

    - name: Extract version from tag
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update version in pom.xml
      run: mvn versions:set -DnewVersion=${{ steps.extract_version.outputs.VERSION }}

    - name: Publish to GitHub Packages
      run: mvn deploy
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 