package com.functest.jpwise;

import static org.testng.Assert.*;

import com.functest.jpwise.algo.PairwiseAlgorithm;
import com.functest.jpwise.core.*;
import java.util.Arrays;
import java.util.List;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

/**
 * Demonstrates how to use JPWise with TestNG's data provider feature. This allows running the same
 * test with different parameter combinations generated by the pairwise algorithm.
 */
public class JpWiseDataProviderDemoTest {

  @DataProvider(name = "browserConfigurations")
  public Object[][] getBrowserConfigurations() {
    // Define test parameters
    TestParameter browser =
        new TestParameter(
            "browser",
            Arrays.asList(
                SimpleValue.of("Chrome", "116.0"),
                SimpleValue.of("Firefox", "118.0"),
                SimpleValue.of("Safari", "17.0")));

    TestParameter os =
        new TestParameter(
            "os",
            Arrays.asList(
                SimpleValue.of("Windows", "10.0"),
                SimpleValue.of("macOS", "14.1"),
                SimpleValue.of("Linux", "6.5")));

    // Define compatibility rules (Safari only works with macOS)
    List<CompatibilityPredicate> rules =
        Arrays.<CompatibilityPredicate>asList(
            (EquivalencePartition<?> v1, EquivalencePartition<?> v2) -> {
              if (v1.getName().equals("Safari")) {
                return v2.getName().equals("macOS");
              }
              if (v2.getName().equals("Safari")) {
                return v1.getName().equals("macOS");
              }
              return true;
            });

    // Create test input
    TestInput input = new TestInput();
    input.add(new TestParameter("browser", browser.getPartitions(), rules));
    input.add(new TestParameter("os", os.getPartitions()));

    // Generate combinations
    TestGenerator generator = new TestGenerator(input);
    generator.generate(new PairwiseAlgorithm());

    // Return as data provider array
    return generator.result().asDataProvider();
  }

  @Test(dataProvider = "browserConfigurations")
  public void testBrowserCompatibility(String description, String browser, String os) {
    // description is automatically generated by JPWise and includes the combination details
    assertNotNull(description, "Description should not be null");
    assertNotNull(browser, "Browser should not be null");
    assertNotNull(os, "OS should not be null");

    // Verify Safari-macOS compatibility rule
    if (browser.equals("Safari")) {
      assertEquals(os, "macOS", "Safari should only run on macOS");
    }

    // Simulate browser testing
    System.out.printf("Testing browser configuration: %s on %s%n", browser, os);

    // Your actual test logic would go here
    // For example:
    // - Launch browser
    // - Run tests
    // - Verify results
  }
}
