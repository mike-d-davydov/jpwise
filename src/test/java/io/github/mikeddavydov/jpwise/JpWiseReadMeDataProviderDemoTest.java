package io.github.mikeddavydov.jpwise;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;

import io.github.mikeddavydov.jpwise.core.CompatibilityPredicate;
import io.github.mikeddavydov.jpwise.core.SimpleValue;
import io.github.mikeddavydov.jpwise.core.TestInput;
import io.github.mikeddavydov.jpwise.core.TestParameter;
import java.util.Arrays;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

/**
 * Demonstrates how to use JPWise with TestNG's data provider feature. This allows running the same
 * test with different parameter combinations generated by the pairwise algorithm.
 */
public class JpWiseReadMeDataProviderDemoTest {
  private static final Logger log = LoggerFactory.getLogger(JpWiseReadMeDataProviderDemoTest.class);

  @DataProvider(name = "browserConfigurations")
  public Object[][] getBrowserConfigurations() {
    // Define compatibility rules (Safari only works with macOS)
    List<CompatibilityPredicate> browserRules =
        Arrays.asList(
            (v1, v2) -> {
              if (v1.getName().equals("Safari") && !v2.getName().equals("macOS")) {
                return false;
              }
              return true;
            });

    // Use factory methods for parameters and input
    TestParameter browser =
        TestParameter.of(
            "browser",
            Arrays.asList(
                SimpleValue.of("Chrome", "116.0"),
                SimpleValue.of("Firefox", "118.0"),
                SimpleValue.of("Safari", "17.0")),
            browserRules);
    TestParameter os =
        TestParameter.of(
            "os",
            SimpleValue.of("Windows", "10.0"),
            SimpleValue.of("macOS", "14.1"),
            SimpleValue.of("Linux", "6.5"));
    TestInput input = new TestInput();
    input.add(browser);
    input.add(os);

    // Generate combinations
    return io.github.mikeddavydov.jpwise.JPWise.generatePairwise(input).asDataProvider();
  }

  @Test(dataProvider = "browserConfigurations")
  public void testBrowserCompatibility(String description, String browser, String os) {
    // description is automatically generated by JPWise and includes the combination details
    assertNotNull(description, "Description should not be null");
    assertNotNull(browser, "Browser should not be null");
    assertNotNull(os, "OS should not be null");

    // Verify Safari-macOS compatibility rule
    if (browser.equals("Safari")) {
      assertEquals(os, "macOS", "Safari should only run on macOS");
    }

    // Simulate browser testing
    log.info("JpWiseDataProviderDemoTest: Testing browser configuration: {} on {}", browser, os);
    // Your actual test logic would go here
  }
}
