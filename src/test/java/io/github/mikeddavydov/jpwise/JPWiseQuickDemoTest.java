package io.github.mikeddavydov.jpwise;

import java.util.Arrays;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import io.github.mikeddavydov.jpwise.core.CombinationTable;
import io.github.mikeddavydov.jpwise.core.CompatibilityPredicate;
import io.github.mikeddavydov.jpwise.core.CyclingPartition;
import io.github.mikeddavydov.jpwise.core.SimpleValue;
import io.github.mikeddavydov.jpwise.core.TestParameter;

/**
 * Demonstrates how to use JPWise with TestNG's data provider feature. This allows running the same
 * test with different parameter combinations generated by the pairwise algorithm.
 */
public class JPWiseQuickDemoTest {
  private static final Logger log = LoggerFactory.getLogger(JPWiseQuickDemoTest.class);

  @DataProvider(name = "jpwiseTestData") // Matches README
  public Object[][] getTestDataFromJPWise() {
    log.info("JPWiseQuickDemoTest: Generating data for DataProvider 'jpwiseTestData'...");
    // Define a rule: "Safari" browser is only compatible with "macOS"
    List<CompatibilityPredicate> browserRules =
        Arrays.asList(
            (ep1, ep2) -> {
              if (ep1.getName().equals("Safari") && !ep2.getName().equals("macOS")) {
                return false; // Safari is incompatible with non-macOS
              }
              return true; // Otherwise compatible
            });

    TestParameter browser =
        TestParameter.of(
            "Browser",
            Arrays.asList(
                CyclingPartition.of("Chrome", Arrays.asList("latest", "previous")),
                SimpleValue.of("Safari")),
            browserRules);

    TestParameter os = TestParameter.of("OS", SimpleValue.of("macOS"), SimpleValue.of("Windows"));

    CombinationTable combinations;
    try {
      log.debug(
          "JPWISE_DEBUG: JPWiseQuickDemoTest.getTestDataFromJPWise calling JPWise.builder()...");
      combinations = JPWise.builder().parameter(browser).parameter(os).generatePairwise();
      log.debug(
          "JPWISE_DEBUG: JPWiseQuickDemoTest.getTestDataFromJPWise call to generatePairwise() completed.");
      log.info(
          "JPWiseQuickDemoTest: Generated {} combinations for DataProvider.", combinations.size());
    } catch (Throwable t) {
      log.error(
          "JPWISE_DEBUG: ERROR during JPWise.builder()...generatePairwise() in DataProvider:", t);
      log.error("Error generating test data in JPWiseQuickDemoTest DataProvider", t);
      // Return an empty array or rethrow to make TestNG aware of the problem clearly
      // For now, let's rethrow to see the TestNG error report.
      throw t;
    }
    return combinations.asDataProvider();
  }

  @Test(dataProvider = "jpwiseTestData") // Matches README
  public void testFeatureWithVariedConfigs(String description, String browser, String os) {
    log.info("Testing: {}", description);

    if ("Safari".equals(browser)) {
      assert "macOS".equals(os) : "Safari should only be paired with macOS";
    }
  }
}
