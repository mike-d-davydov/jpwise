/**
 * Copyright (c) 2010 Ng Pan Wei, 2013 Mikhail Davydov
 *
 * <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * <p>The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package io.github.mikeddavydov.jpwise.core;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A collection of test case combinations generated by a test generation algorithm. This class
 * stores and manages the complete set of test cases, providing methods to access them in different
 * formats suitable for test execution.
 *
 * <p>The table can be accessed in several ways:
 *
 * <ul>
 *   <li>As a list of {@link Combination} objects
 *   <li>As a list of maps, where each map represents a test case with parameter names as keys
 *   <li>As a TestNG data provider array
 * </ul>
 *
 * <p>Example usage:
 *
 * <pre>
 * // Generate test cases
 * TestGenerator generator = new TestGenerator(input);
 * generator.generate(new PairwiseAlgorithm());
 * CombinationTable table = generator.result();
 *
 * // Access as combinations
 * for (Combination combination : table.combinations()) {
 *     log.info("Generated combination: {}", combination);
 * }
 *
 * // Access as row maps
 * List&lt;Map&lt;String, Object&gt;&gt; rows = table.asRowMapList();
 * for (Map&lt;String, Object&gt; row : rows) {
 *     String browser = (String) row.get("browser");
 *     String os = (String) row.get("os");
 * }
 *
 * // Use with TestNG
 * {@literal @}Test(dataProvider = "testCases")
 * public void testCombination(String description, String browser, String os) {
 *     // Test implementation
 * }
 *
 * {@literal @}DataProvider(name = "testCases")
 * public Object[][] getTestCases() {
 *     return table.asDataProvider();
 * }
 * </pre>
 */
public class CombinationTable {
  private static final Logger logger = LoggerFactory.getLogger(CombinationTable.class);

  /** The list of test case combinations. */
  private List<Combination> combinations;

  /** Creates a new empty combination table. */
  public CombinationTable() {
    this.combinations = new ArrayList<>();
    logger.debug("Created new empty CombinationTable");
  }

  /**
   * Creates a new combination table with the given combinations.
   *
   * @param combinations The list of combinations to include
   */
  public CombinationTable(List<Combination> combinations) {
    this.combinations = new ArrayList<>(combinations);
  }

  /**
   * Gets the number of combinations in this table.
   *
   * @return The number of combinations
   */
  public int size() {
    return combinations.size();
  }

  /**
   * Gets all combinations in this table.
   *
   * @return An immutable list of all combinations
   */
  public List<Combination> combinations() {
    return combinations;
  }

  /**
   * Adds a combination to this table.
   *
   * @param combination The combination to add
   * @throws NullPointerException if combination is null
   */
  public void add(Combination combination) {
    Objects.requireNonNull(combination, "combination must not be null");
    combinations.add(combination);
    logger.debug("Added combination #{}", combinations.size());
  }

  /**
   * Adds all combinations from another table to this one.
   *
   * @param other The table whose combinations to add
   * @throws NullPointerException if other is null
   */
  public void addAll(CombinationTable other) {
    Objects.requireNonNull(other, "other table must not be null");
    combinations.addAll(other.combinations);
  }

  /**
   * Checks if this table contains a specific combination.
   *
   * @param combination The combination to check for
   * @return true if the combination is in this table, false otherwise
   * @throws NullPointerException if combination is null
   */
  public boolean contains(Combination combination) {
    Objects.requireNonNull(combination, "combination must not be null");
    return combinations.contains(combination);
  }

  /**
   * Gets a combination by its index.
   *
   * @param index The index of the combination to get
   * @return The combination at the given index
   * @throws IndexOutOfBoundsException if the index is out of range
   */
  public Combination get(int index) {
    return combinations.get(index);
  }

  /**
   * Removes a combination from this table.
   *
   * @param combination The combination to remove
   * @return true if the combination was removed, false if it wasn't in the table
   */
  public boolean remove(Combination combination) {
    return combinations.remove(combination);
  }

  /** Removes all combinations from this table. */
  public void clear() {
    combinations.clear();
  }

  /**
   * Checks if this table is empty.
   *
   * @return true if this table has no combinations, false otherwise
   */
  public boolean isEmpty() {
    return combinations.isEmpty();
  }

  /**
   * Converts the test cases to a list of maps. Each map represents a test case where keys are
   * parameter names and values are the parameter values. A special key "combination_description"
   * contains the string representation of the combination.
   *
   * @return A list of maps representing the test cases
   */
  public List<Map<String, Object>> asRowMapList() {
    List<Map<String, Object>> rows = new ArrayList<>(combinations.size());

    for (Combination combination : combinations) {
      Map<String, Object> row = new HashMap<>();
      EquivalencePartition[] values = combination.getValues();

      for (EquivalencePartition value : values) {
        if (value != null && value.getParentParameter() != null) {
          row.put(value.getParentParameter().getName(), value.getValue());
        }
      }
      row.put("combination_description", combination.toString());
      rows.add(row);
    }

    return rows;
  }

  /**
   * Converts the test cases to a format suitable for TestNG's data provider. Each row in the
   * returned array contains: - The combination description as the first element - The actual
   * parameter values in subsequent elements
   *
   * @return A 2D array suitable for use with TestNG's data provider
   */
  public Object[][] asDataProvider() {
    logger.debug("Converting {} combinations to TestNG DataProvider format", combinations.size());
    if (combinations.isEmpty()) {
      return new Object[0][];
    }

    List<Object[]> testCases = new ArrayList<>(combinations.size());
    for (Combination combination : combinations) {
      testCases.add(combination.asDataProviderRow());
    }

    return testCases.toArray(new Object[0][]);
  }

  /**
   * Gets the number of parameters in each combination. Returns -1 if the table is empty.
   *
   * @return The number of parameters, or -1 if empty
   */
  public int breadth() {
    if (combinations.isEmpty()) {
      return -1;
    }
    return combinations.get(0).size();
  }

  /**
   * Calculates the total number of unique parameter value pairs covered by the test cases in this
   * table. This is useful for evaluating the coverage of pairwise testing.
   *
   * @return The number of unique parameter value pairs covered, or -1 if the table is empty
   */
  public int span() {
    int depth = breadth();
    if (depth < 0) {
      return -1;
    }

    Map<String, Integer> uniquePairs = new HashMap<>();

    for (Combination combination : combinations) {
      EquivalencePartition[] values = combination.getValues();

      for (int i = 0; i < depth; i++) {
        for (int j = i + 1; j < depth; j++) {
          if (values[i] != null && values[j] != null) {
            Combination pair = new Combination(depth);
            pair.setValue(i, values[i]);
            pair.setValue(j, values[j]);
            uniquePairs.put(pair.getKey(), 1);
          }
        }
      }
    }

    return uniquePairs.size();
  }

  @Override
  public String toString() {
    return String.format(
        "CombinationTable{%d combinations.%s}",
        combinations.size(), combinations.isEmpty() ? "" : (" First is: " + combinations.get(0)));
  }
}
